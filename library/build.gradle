apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 28
        versionCode project.ext.versionCodeInt
        versionName version
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    api 'androidx.legacy:legacy-support-v4:1.0.0'

    testImplementation 'junit:junit:4.12'
}

bintray {
    user = getMavenUsername()
    key = getMavenPassword()
    publications = ['MaterialCalendarView']
    publish = VERSION_NAME.contains("SNAPSHOT")
    override = VERSION_NAME.contains("SNAPSHOT")
    pkg {
        repo = 'maven-internal'
        name = POM_ARTIFACT_ID
        userOrg = 'whistle'
        licenses = []
        vcsUrl = 'https://github.com/WhistleLabs/material-calendarview'

        version {
            name = VERSION_NAME
            desc = 'Material Calendarview with custom DayViews'
            released = new Date()
        }
    }
}

publishing {
    publications {
        MaterialCalendarView(MavenPublication) {
            groupId GROUP
            artifactId POM_ARTIFACT_ID
            version VERSION_NAME

            artifact file('build/outputs/aar/library-release.aar')
            artifact androidJavadocsJar
            artifact androidSourcesJar

            // AAR publications don't automatically know about our dependencies, so add them to pom manually
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each { // only add 'compile' dependencies
                    if (it.group && it.name && it.version) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    options.addStringOption("tag", 'inspiredby::"Inspired by:"')
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

afterEvaluate {
    androidJavadocs.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompile.classpath.files
    })
}

def getMavenUsername() {
    project.hasProperty("WHISTLE_MAVEN_USERNAME") ? project.property("WHISTLE_MAVEN_USERNAME") : System.getenv('WHISTLE_MAVEN_USERNAME')
}

def getMavenPassword() {
    project.hasProperty('WHISTLE_MAVEN_PASSWORD') ? project.property('WHISTLE_MAVEN_PASSWORD') : System.getenv('WHISTLE_MAVEN_PASSWORD')
}